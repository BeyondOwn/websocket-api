// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int     @id @default(autoincrement())
  googleId     String
  name         String
  email        String  @unique
  picture      String  @default("user.png")
  password     String?
  isGoogleUser Boolean @default(false)

  ownedServer     Server[]       @relation("ServerOwner")
  memberOfServers ServerMember[]
  messages        Message[]
}

model Server {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  inviteCode  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId  Int
  owner    User           @relation("ServerOwner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members  ServerMember[]
  channels Channel[]
  messages Message[]
}

model Channel {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  serverId Int
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
}

model ServerMember {
  id       Int      @id @default(autoincrement())
  role     String   @default("member")
  joinedAt DateTime @default(now())

  // Relations
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverId Int
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([serverId, userId])
}

model Message {
  id        String    @id @unique
  content   String
  links     Json[]    @default([])
  createdAt DateTime  @default(now())
  edited    Boolean   @default(false)
  editedAt  DateTime?

  // Relations
  serverId  Int
  server    Server  @relation(fields: [serverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
